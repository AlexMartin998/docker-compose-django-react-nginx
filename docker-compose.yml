version: '3.9'
services:
  proxy:
    image: nginx:latest
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    ports:
      - '3000:3000'
    depends_on:
      - backend
      - frontend
    networks:
      - erp_network

  db:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: base_erp
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres -d base_erp']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - erp_network

  redis:
    image: redis:latest
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD-SHELL', 'redis-cli ping']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - erp_network

  backend:
    container_name: backenderp
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: ultraerpback:1.0
    command: bash -c "cd /backend && python manage.py runserver 0.0.0.0:4000"
    volumes:
      - ./backend/app:/backend
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - erp_network

  frontend:
    container_name: frontenderp
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: ultraerpfront:1.0
    command: bash -c "cd /frontend && npm install && npm run dev -- --host 0.0.0.0 --port 5000"
    volumes:
      - ./frontend/app:/frontend
    depends_on:
      - backend
    networks:
      - erp_network

networks:
  erp_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  postgres_data_fibra_drive:
  archivos_estaticos:
  postgres_data_consulta:
  redis_data_consulta:
  postgres_data_storage:
  redis_data_storage:
